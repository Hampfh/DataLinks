"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[345],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return h}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),h=o,f=p["".concat(l,".").concat(h)]||p[h]||d[h]||i;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6105:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],s={sidebar_position:2,title:"Structure"},l="Folder structure",u={unversionedId:"Server/structure",id:"Server/structure",isDocsHomePage:!1,title:"Structure",description:"Okay so how is this project organized?",source:"@site/docs/Server/structure.md",sourceDirName:"Server",slug:"/Server/structure",permalink:"/docs/Server/structure",editUrl:"https://github.com/hampfh/datalinks/docs/Server/structure.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Structure"},sidebar:"tutorialSidebar",previous:{title:"Get started",permalink:"/docs/Server/intro-server"},next:{title:"Controllers",permalink:"/docs/Server/controllers"}},c=[{value:"Okay so how is this project organized?",id:"okay-so-how-is-this-project-organized",children:[{value:"Controllers",id:"controllers",children:[],level:3},{value:"Middlewares",id:"middlewares",children:[],level:3},{value:"Models",id:"models",children:[],level:3},{value:"Routes",id:"routes",children:[],level:3},{value:"Utilities",id:"utilities",children:[],level:3}],level:2}],d={toc:c};function p(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"folder-structure"},"Folder structure"),(0,i.kt)("h2",{id:"okay-so-how-is-this-project-organized"},"Okay so how is this project organized?"),(0,i.kt)("p",null,"The project is using flavour of the MVC model, aka Model, View, Controller. A way to split different into logical parts, thus making it easier to maintain. Lets have a look at the actual file structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<root>\n  \u2514\u2500server\n     \u2514\u2500src\n        \u251c\u2500controllers\n        \u251c\u2500middlewares\n        \u251c\u2500models\n        \u251c\u2500routes\n        \u2514\u2500utilities\n")),(0,i.kt)("h3",{id:"controllers"},"Controllers"),(0,i.kt)("p",null,"Controllers are the actual business logic in the API, they take some data as input, perform some task, and then emits an output. More about them ",(0,i.kt)("a",{parentName:"p",href:"controllers"},"here"),"."),(0,i.kt)("h3",{id:"middlewares"},"Middlewares"),(0,i.kt)("p",null,"Middlewares are highly reusable functions that can be put between an actual request and a controller, these are often used to verify that a user has some form of data that is required for it to perform the request. An example of a common middleware is an authentication function that assures that the user performing the request has the privilege to perform the action (such as deleting an item or creating a new one)."),(0,i.kt)("h3",{id:"models"},"Models"),(0,i.kt)("p",null,"Models are definitions of how data is stored in the database. These functions do not contain any logic. All models are defined using ",(0,i.kt)("a",{parentName:"p",href:"https://typegoose.github.io/"},"typegoose"),"."),(0,i.kt)("h3",{id:"routes"},"Routes"),(0,i.kt)("p",null,"Routes have the responsibility to redirect an incoming request to the correct corresponding controller. Incoming requests will always have a URI such as ",(0,i.kt)("inlineCode",{parentName:"p"},"/<program>/content"),'. This information is used to determine which controller to use. A route path can have one out of four different "http verbs", ',(0,i.kt)("inlineCode",{parentName:"p"},"POST"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GET"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATE")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DELETE"),"."),(0,i.kt)("h3",{id:"utilities"},"Utilities"),(0,i.kt)("p",null,"Utilities are highly reusable (very general) functions that don't necessarily belong to a specific place in the codebase. Think of utilities as small libraries."))}p.isMDXComponent=!0}}]);