{"version":3,"sources":["components/screens/Subjects/components/Subject.tsx","components/screens/Subjects/Subjects.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Subject","props","_onSubjectClick","state","collapsState","setState","setTimeout","this","className","style","backgroundColor","color","height","onClick","title","display","href","meetingLink","subjectSite","description","Component","Subjects","subjects","map","subject","key","uuid","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.672cc417.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport \"./Subject.css\"\r\n\r\nexport class Subject extends Component<PropsForComponent, StateForComponent> {\r\n\r\n\tconstructor(props: PropsForComponent) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.state = {\r\n\t\t\tcollapsState: 0\r\n\t\t}\r\n\t}\r\n\r\n\t_onSubjectClick = () => {\r\n\t\tif (this.state.collapsState === 0) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcollapsState: 1\r\n\t\t\t})\r\n\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tcollapsState: 2\r\n\t\t\t\t})\r\n\t\t\t}, 200)\r\n\t\t} else if (this.state.collapsState === 2) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcollapsState: 0\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\t// Fully collapsed\r\n\t\tif (this.state.collapsState === 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"Subject\" style={{ backgroundColor: this.props.color, height: \"4rem\" }} onClick={this._onSubjectClick}>\r\n\t\t\t\t\t<h4 className=\"Header\">{this.props.title}</h4>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t} else if (this.state.collapsState === 1) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"Subject\" style={{ backgroundColor: this.props.color, height: \"10rem\" }}>\r\n\t\t\t\t\t<h4 className=\"Header\" onClick={this._onSubjectClick}>{this.props.title}</h4>\r\n\t\t\t\t\t<div className=\"LinkContainer\" style={{ display: \"none\" }}>\r\n\t\t\t\t\t\t<a href={this.props.meetingLink} className=\"Button\">Join meeting</a>\r\n\t\t\t\t\t\t<a href={this.props.subjectSite} className=\"Button\">Go to site</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"Subject\" style={{ backgroundColor: this.props.color, height: \"10rem\" }}>\r\n\t\t\t\t\t<h4 className=\"Header\" onClick={this._onSubjectClick}>{this.props.title}</h4>\r\n\t\t\t\t\t<p className=\"Description\">{this.props.description}</p>\r\n\t\t\t\t\t<div className=\"LinkContainer\">\r\n\t\t\t\t\t\t<a href={this.props.meetingLink} className=\"Button\">Join meeting</a>\r\n\t\t\t\t\t\t<a href={this.props.subjectSite} className=\"Button\">Go to site</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport interface PropsForComponent {\r\n\ttitle: string,\r\n\tdescription: string,\r\n\tsubjectSite: string,\r\n\tmeetingLink: string,\r\n\tcolor: string\r\n}\r\n\r\nexport interface StateForComponent {\r\n\tcollapsState: number\r\n}\r\n\r\nexport default Subject\r\n","import React, { Component } from 'react'\r\nimport { subjects } from \"../../../assets/data.json\"\r\nimport SubjectComponent from \"./components/Subject\"\r\nimport { v4 as uuid } from \"uuid\"\r\nimport \"./Subjects.css\"\r\n\r\nexport class Subjects extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<section className=\"Master\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h1 className=\"Title\">Subjects</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"SubjectContainer\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsubjects.map((subject) =>\r\n\t\t\t\t\t\t\t<SubjectComponent\r\n\t\t\t\t\t\t\t\tkey={uuid()}\r\n\t\t\t\t\t\t\t\ttitle={subject.title}\r\n\t\t\t\t\t\t\t\tdescription={subject.description}\r\n\t\t\t\t\t\t\t\tsubjectSite={subject.subjectSite}\r\n\t\t\t\t\t\t\t\tmeetingLink={subject.meetingLink}\r\n\t\t\t\t\t\t\t\tcolor={subject.color}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Subjects\r\n","import React from 'react';\nimport Subjects from \"./components/screens/Subjects/Subjects\"\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<Subjects />\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}